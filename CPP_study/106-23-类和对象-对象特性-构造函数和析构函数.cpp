
/*
	第1阶段C++ 匠心之作 从0到1入门

	第2阶段实战-通讯录管理

	第3阶段-C++核心编程

		1 内存分区模型

		2 引用

		3 函数提高

		4 类和对象

			4.1 封装

			4.2 对象的初始化和清理

				生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
				C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。

				4.2.1 构造函数和析构函数

					对象的初始化和清理也是两个非常重要的安全问题

						一个对象或者变量没有初始状态，对其使用后果是未知

						同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题

					c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。

					对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供

					编译器提供的构造函数和析构函数是空实现。

						构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
						析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。

					构造函数语法：类名(){}

						构造函数，没有返回值也不写void
						函数名称与类名相同
						构造函数可以有参数，因此可以发生重载
						程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次

					析构函数语法： ~类名(){}

						析构函数，没有返回值也不写void
						函数名称与类名相同,在名称前加上符号 ~
						析构函数不可以有参数，因此不可以发生重载
						程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次
*/

#include <iostream>

using namespace std;

class Person
{
public:
	// 不写在public里自动访问不到

	//构造函数
	Person()
	{
		cout << "Person的构造函数调用" << endl;
	}

	//析构函数
	~Person()
	{
		cout << "Person的析构函数调用" << endl;
	}

};

void test01()
{
	Person p;// 在栈上的数据，test01执行完毕后，自动释放这个对象
}

int main()
{
	test01();

	//Person p;// main函数执行完后，也会调用析构函数，不过可能没机会看到

	return 0;
}
