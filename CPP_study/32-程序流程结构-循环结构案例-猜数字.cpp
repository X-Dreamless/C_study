
/*
	1 C++初识

	2 数据类型

	3 运算符

	4 程序流程结构

		4.1 选择结构

		4.2 循环结构

			4.2.1 while循环语句

			while循环练习案例：猜数字

				案例描述：系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。

				库函数 rand
					
					<cstdlib> (stdlib.h)
					int rand (void);

					Generate random number
					Returns a pseudo-random integral number in the range between 0 and RAND_MAX.
					This number is generated by an algorithm that returns a sequence of apparently non-related numbers each time it is called. This algorithm uses a seed to generate the series, which should be initialized to some distinctive value using function srand.
					RAND_MAX is a constant defined in <cstdlib>.
					A typical way to generate trivial pseudo-random numbers in a determined range using rand is to use the modulo of the returned value by the range span and add the initial value of the range:
					
					生成随机数
					返回介于 和 之间的伪随机整数。
					此数字由算法生成，该算法在每次调用时都会返回一系列明显不相关的数字。该算法使用种子生成序列，应使用函数将其初始化为某个独特的值。
					是 中定义的常量。
					在确定的范围内生成平凡伪随机数的典型方法是使用返回值的取模范围并将范围的初始值相加：0RAND_MAXsrandRAND_MAX<cstdlib>rand

					v1 = rand() % 100;         // v1 in the range 0 to 99
					v2 = rand() % 100 + 1;     // v2 in the range 1 to 100
					v3 = rand() % 30 + 1985;   // v3 in the range 1985-2014

					Notice though that this modulo operation does not generate uniformly distributed random numbers in the span (since in most cases this operation makes lower numbers slightly more likely).
					C++ supports a wide range of powerful tools to generate random and pseudo-random numbers (see <random> for more info).

					请注意，此模运算不会在跨度中生成均匀分布的随机数（因为在大多数情况下，此操作会使较小的数字更有可能）。
					C++支持各种强大的工具来生成随机数和伪随机数（有关详细信息，请参阅 <random>）。

					参数
						(none)
						无

					返回值
						An integer value between 0 and RAND_MAX.
						介于 0 和 RAND_MAX 之间的整数值。


				宏 RAND_MAX

					<cstdlib> (stdlib.h)

					Maximum value returned by rand
					This macro expands to an integral constant expression whose value is the maximum value returned by the rand function.

					This value is library-dependent, but is guaranteed to be at least 32767 on any standard library implementation.

					rand 返回的最大值
					此宏扩展为整数常量表达式，其值是函数返回的最大值。

					此值依赖于库，但保证至少在任何标准库实现上。rand32767


				库函数 srand

					<cstdlib> (stdlib.h)
					void srand (unsigned int seed);

					Initialize random number generator
					The pseudo-random number generator is initialized using the argument passed as seed.
					For every different seed value used in a call to srand, the pseudo-random number generator can be expected to generate a different succession of results in the subsequent calls to rand.
					Two different initializations with the same seed will generate the same succession of results in subsequent calls to rand.
					If seed is set to 1, the generator is reinitialized to its initial value and produces the same values as before any call to rand or srand.
					In order to generate random-like numbers, srand is usually initialized to some distinctive runtime value, like the value returned by function time (declared in header <ctime>). This is distinctive enough for most trivial randomization needs.
					
					初始化随机数生成器
					伪随机数生成器使用作为 传递的参数进行初始化。
					对于调用中使用的每个不同值，伪随机数生成器可以预期在随后的调用中生成不同的连续结果。
					具有相同值的两个不同初始化将在后续调用中生成相同的连续结果。
					如果设置为 ，则生成器将重新初始化为其初始值，并生成与调用 或 之前相同的值。
					为了生成类似随机的数字，通常初始化为一些独特的运行时值，如函数返回的值（在标头<ctime>中声明）。这对于大多数琐碎的随机化需求来说足够独特。seedseedsrandrandseedrandseed1randsrandsrandtime

					参数
						seed
						种子

						An integer value to be used as seed by the pseudo-random number generator algorithm.
						伪随机数生成器算法用作种子的整数值。

					返回值
						none
						无


				库函数 time

					<ctime> (time.h)
					time_t time (time_t* timer);

					Get current time
					Get the current calendar time as a value of type time_t.
					The function returns this value, and if the argument is not a null pointer, it also sets this value to the object pointed by timer.
					The value returned generally represents the number of seconds since 00:00 hours, Jan 1, 1970 UTC (i.e., the current unix timestamp). Although libraries may use a different representation of time: Portable programs should not use the value returned by this function directly, but always rely on calls to other elements of the standard library to translate them to portable types (such as localtime, gmtime or difftime).

					获取当前时间
					获取当前日历时间作为类型值。
					该函数返回此值，如果参数不是空指针，它还将此值设置为 由 指向的对象。
					返回的值通常表示自 1970 年 1 月 1 日 00：00 小时（即当前 unix 时间戳）以来的秒数。尽管库可以使用不同的时间表示形式：可移植程序不应直接使用此函数返回的值，而应始终依赖于对标准库其他元素的调用来将它们转换为可移植类型（如 、 或 ）。time_ttimerlocaltimegmtimedifftime

					参数
						timer
						Pointer to an object of type time_t, where the time value is stored.
						Alternatively, this parameter can be a null pointer, in which case the parameter is not used (the function still returns a value of type time_t with the result).

						定时器
						指向存储时间值的类型对象的指针。
						或者，此参数可以是 null 指针，在这种情况下，不使用参数（函数仍返回包含结果的类型值）。time_ttime_t

					返回值
						The current calendar time as a time_t object.
						If the argument is not a null pointer, the return value is the same as the one stored in the location pointed by argument timer.
						If the function could not retrieve the calendar time, it returns a value of -1.
						time_t is an alias of a fundamental arithmetic type capable of representing times.

						作为time_t对象的当前日历时间。
						如果参数不是空指针，则返回值与存储在参数所指向的位置的值相同。
						如果函数无法检索日历时间，则返回值 。
						是能够表示时间的基本算术类型的别名。timer-1time_t


				类型 time_t

					Time type
					Alias of a fundamental arithmetic type capable of representing times, as those returned by function time.
					For historical reasons, it is generally implemented as an integral value representing the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC (i.e., a unix timestamp). Although libraries may implement this type using alternative time representations.
					Portable programs should not use values of this type directly, but always rely on calls to elements of the standard library to translate them to portable types.
					
					时间类型
					能够表示时间的基本算术类型的别名，如函数返回的时间。
					由于历史原因，它通常实现为一个整数值，表示自 1970 年 1 月 1 日 00：00 UTC 以来经过的秒数（即 unix 时间戳）。尽管库可以使用替代时间表示来实现此类型。
					可移植程序不应直接使用此类型的值，而应始终依赖于对标准库元素的调用来将它们转换为可移植类型。time
*/

#include <iostream>
#include <ctime>

using namespace std;

int main()
{
	// 添加随机数种子
	// 利用当前系统时间生成随机数，防止每次随机数都一样
	srand((unsigned int)time(NULL));
	
	// 生成随机数
	// 生成0 到 99，再加1
	int num = rand() % 100 + 1;
	//cout << num << endl;

	// 玩家进行猜测
	int val = 0;

	while (true)
	{
		cout << "输入猜测的数字>";
		cin >> val;

		// 判断玩家的猜测
		if (val > num)
		{
			cout << "大了" << endl;
		}
		else if (val < num)
		{
			cout << "小了" << endl;
		}
		else
		{
			cout << "猜对了" << endl;
			break;
		}
	}

	return 0;
}