
/*
	1 C++初识

	2 数据类型

	3 运算符

	4 程序流程结构

	5 数组

		5.1 概述

		5.2 一维数组

		5.3 二维数组

			二维数组就是在一维数组上，多加一个维度。

			5.3.1 二维数组定义方式

				二维数组定义的四种方式：

					数据类型 数组名[ 行数 ][ 列数 ];
					数据类型 数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };
					数据类型 数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};
					数据类型 数组名[ ][ 列数 ] = { 数据1，数据2，数据3，数据4};

				建议：以上4种定义方式，利用 第二种更加直观，提高代码的可读性

				总结：在定义二维数组时，如果初始化了数据，可以省略行数
*/

#include <iostream>

using namespace std;

int main()
{
	//方式1  
	//数组类型 数组名 [行数][列数]
	int arr[2][3];
	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[0][2] = 3;
	arr[1][0] = 4;
	arr[1][1] = 5;
	arr[1][2] = 6;

	// 外层循环 行
	for (int i = 0; i < 2; i++)
	{
		// 内层循环 列
		for (int j = 0; j < 3; j++)
		{
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}

	//方式2 
	//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };
	int arr2[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};

	//方式3
	//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };
	int arr3[2][3] = { 1,2,3,4,5,6 };

	//方式4 
	//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };
	int arr4[][3] = { 1,2,3,4,5,6 };

	return 0;
}